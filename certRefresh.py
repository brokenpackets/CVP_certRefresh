#!/usr/bin/env python
import requests
import json
import time
###### User Variables

username = 'admin'
password = 'Arista123'
server_list = ['192.168.255.50']
certRefreshDays = 30

######
connect_timeout = 10
headers = {"Accept": "application/json",
           "Content-Type": "application/json"}
requests.packages.urllib3.disable_warnings()
session = requests.Session()

def login(url_prefix, username, password):
    authdata = {"userId": username, "password": password}
    headers.pop('APP_SESSION_ID', None)
    response = session.post(url_prefix+'/web/login/authenticate.do', data=json.dumps(authdata),
                            headers=headers, timeout=connect_timeout,
                            verify=False)
    cookies = response.cookies
    headers['APP_SESSION_ID'] = response.json()['sessionId']
    if response.json()['sessionId']:
        return response.json()['sessionId']

def logout(url_prefix):
    response = session.post(url_prefix+'/web/login/logout.do')
    return response.json()

def get_certificate(url_prefix):
    response = session.get(url_prefix+'/cvpservice/ssl/getCertificate.do?certType=cvpCert')
    return response.json()

def regen_certificate(url_prefix,data):
    tempData = {
                   "certType":"cvpCert",
                   "commonName": data['commonName'],
                   "country": data['country'],
                   "description": "selfsigned Certificate generated by certRotate.py",
                   "digestAlgorithm": "SHA256withRSA",
                   "encryptAlgorithm": "RSA",
                   "keyLength": 2048,
                   "location": data["location"],
                   "organization": data["organization"],
                   "organizationUnit": data["organizationUnit"],
                   "state": data["state"],
                   "subjectAlternateNameDNSList": data["subjectAlternateNameDNSList"],
                   "subjectAlternateNameIPList": data["subjectAlternateNameIPList"],
                   "validity": 365,
               }
    response = session.post(url_prefix+'/cvpservice/ssl/generateCertificate.do', data=json.dumps(tempData))
    response2 = install_certificate(url_prefix)
    return response2

def install_certificate(url_prefix):
    response = session.post(url_prefix+'/cvpservice/ssl/installCertificate.do')
    return response.json()

def get_configlets(url_prefix):
    response = session.get(url_prefix+'/cvpservice/configlet/getConfiglets.do?type=Generated&startIndex=0&endIndex=0')
    return response.json()

def delete_configlet(url_prefix,configlet_key,configlet_name):
    tempData = [{"key": configlet_key, "name": configlet_name}]
    response = session.post(url_prefix+'/cvpservice/configlet/deleteConfiglet.do', data=json.dumps(tempData))
    return response.json()

#### Login ####
for server in server_list:
    server1 = 'https://'+server
    print '###### Logging into Server '+server
    login(server1, username, password)
    output = get_certificate(server1)
    currentTime = time.time()
    RefreshTime = int(currentTime+(certRefreshDays*86400))
    certExpiry = output['validTill']/1000
    if RefreshTime > certExpiry:
        print 'Cert Expiring in under 30 days on '+server+'. Refreshing.'
        print regen_certificate(server1,output)
    else:
        print 'Certificate still valid. Skipping.'
    logout(server1)
print 'Done'
